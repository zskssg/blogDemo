
博客项目文件清单

1.建立文件所需文件夹
  public  静态资源
  model   数据库操作
  route   路由
  views   模板
  config  项目运行配置
  middleware  中间件处理

2.初始化项目描述文件
  npm init -y

3.项目第三方模块  
  express     创建网站服务器和路由
  mongoose    连接和操作数据库
  art-template express-art-template   模板引擎
  body-parser   处理post参数
  bcrypt      密码加密处理 -- 哈希加密模块，可以在加密的密码中加入随机字符串增加破密难度   npm install bcrypt
        环境依赖
          1.python
          2.node-gyp    npm install node-gyp -g
          3.windows-build-tools    npm install -global -production windows-build-tools --vs2015
  express-session   实现session功能
  joi  javaScript对象的规则描述语言和验证器
  formidable  解析表单，支持get请求参数，post请求参数，文件上传
  dateformat  模板引擎处理时间格式
  mongoose-sex-page   用于处理数据分页功能
  config   允许开发人员将不同运行环境下的应用配置信息抽离到单独的文件中，模块内部自动判断当前项目的运行环境
  ，并读取对应的配置信息，极大提供应用配置信息的维护成本，避免了当运行环境重复多次切换时，手动到项目代码中修改配置信息。
      使用步骤：
        1.npm install config
        2.在根目录创建config文件夹
        3.在config文件夹下创建default.json,development.json,production.json
        4.在项目中通过require方法导入模块
        5.使用模块内部提供的get方法获取配置信息。
    config允许将敏感信息存放在系统环境变量中
        1.在config文件夹下创建custom-environment-variables.json文件
        2.在系统变量中配置属性值，在配置属性的文件中属性值填写环境变量名字
        3.项目运行时config模块会查找系统环境变量，并读取其值作为配置属性值。
  


4.创建网站服务器


5.项目功能实现
  一、登录
    1创建用户集合，初始化用户
    2.为登录表单设置请求地址、请求方式以及表单项属性
    3.用户点击登陆时，客户端验证用户是否填写表单    客户端验证
    4.如果有一项没填写则阻止提交
    5.服务器接收请求参数，验证用户是否填写表单      服务器验证
    6.如果有一项没填写，则做出响应给客户端，阻止程序向下执行
    7.根据邮箱地址查询用户信息
    8.如果用户不存在，做出响应，阻止程序向下执行
    9.如果用户存在，将用户密码进行比对
    10.比对成功，登录成功,将用户名和角色存储到session中，用户信息放入app.locals对象中，然后判断角色状态，如果
        是admin进入后台管理页面，normal进入文章列表页面
    11.比对失败，登录失败
  二、添加用户
    1.添加用户编辑页面路由
    2.为添加表单设置请求地址、请求方式以及表单项属性
    3.js中为表单中每一项属性做验证判断，并将不符合规则信息显示出来
    4.服务器中为提交的请求中每一项属性做验证判断，重定向到用户编辑页面并将不符合规则信息显示出来
    5.查询邮箱是否已经存在，若存在，重定向到用户编辑页面，显示邮箱已经存在信息
    6.若不存在，将请求中的密码进行加密
    7.将请求信息添加到数据库中，添加成功后重定向到用户列表页面
  三、渲染用户列表
    1.创建用户列表页面路由
    2.查询用户数据
    3.使用模板引擎语法将数据展示出来
  四、数据分页
    1.当前页，用户通过带点击上一页或下一页或页码进行产生，客户端通过get参数方式传递给服务器
    2.总页数，根据总页数判断当前页是否为最后一页，根据判断结果做出响应操作
    limit(n)  限制查询数量，传入每页要显示的数量
    skip(n)   跳过多少条数据 传入显示数据的位置
  五、用户信息修改
    1.将要修改用户的Id传递给服务器
    2.建立用户修改功能对应的路由
    3.接收客户端表单的传送参数
    4.根据id查询用户信息，并将传递过来的密码和数据库中的密码进行比对
    5.如果比对失败，对客户端响应密码错误不能修改
    6.如果比对成功，进行规则验证，成功后将用户信息更新到用户中。
    7.重定向到用户列表页面
  六、用户信息删除
    1.在确认删除框中添加隐藏域用以存储用于要删除用户的ID值
    2.为删除按钮添加自定义属性用以存储要删除用户的ID值
    3.为删除按钮添加点击事件，在点击事件处理函数中获取自定义属性ID值存放到表单隐藏域中
    4.为删除表单添加删除地址和提交方式
    5.在服务器端建立删除功能路由
    6.获取请求参数ID,进行数据删除操作
  七.文章信息列表渲染
    1.接收请求过来的页码
    2.location里存放下文章路由标识，表明当前访问的是文章列表页面
    3.根据指定条件联合查询文章和用户数据，
    4.将数据处理一下后传递到文章显示列表模板中，
    5.在模板中处理显示数据，时间格式使用dateFormat处理

  八.文章信息删除
    1.在文章信息列表中点击删除，跳出模态框，模态框中是个表单，其中有一个hidden输入框，值为这条数据的id，表单提交方式为get;确认是否删除这条数据
    2.如果确定则进行删除功能，取消则将模态框隐藏
    3.如果确定删除，会跳转到处理删除功能的路由文件
    4.获取将要删除数据的请求参数id,根据id查找并删除数据
    5.删除成功后显示文章信息列表页面。
  九.文章信息添加
    1.在文章信息列表页面中点击添加文章即可跳转到文章编辑页面
    2.判断请求信息中并没有id，所以进行文章添加操作，并向模板传递文章添加表单路由
    3.在模板中，提交封面后，处理数据实现封面预览功能
    4.填写好数据后提交表单，进行文章添加处理
    5.使用formidable解析表单数据，判断数据中标题是否符合规则，不符合规则的话跳转到文章编辑页面并传递错误信息
    6.如果符合规则，向数据库中添加文章，其中封面字段存放的是图片位置的绝对路径
    7.添加成功后跳转到文章信息列表页面
  十.文章信息修改
    1.在文章信息列表页面中点击修改即可跳转到文章编辑页面
    2.判断请求信息中有id，所以进行文章修改操作，并向模板传递文章修改表单路由和文章数据
    3.在模板中处理显示数据，时间格式使用dateFormat处理，表单路由为传递过来的路由，填写后提交即可
    4.填写好数据后提交表单，进行文章修改处理
    5.使用formidable解析表单数据，判断数据中标题是否符合规则，不符合规则的话跳转到文章编辑页面并传递id和错误信息
    6.如果符合规则，根据id向数据库中更新文章，其中封面字段存放的是图片位置的绝对路径
    7.更新成功后跳转到文章信息列表页面
  十一.文章数据前台列表页面渲染
    1.接收请求过来的页码
    2.根据指定条件联合查询文章和用户数据，
    4.将数据处理一下后传递到文章显示列表模板中，
    5.在模板中处理显示数据，时间格式使用dateFormat处理
  十二.文章详情页面渲染
    1.在文章数据前台列表页面中点击相应文章即可发出文章详情页面渲染get请求，其中参数有id
    2.获取请求参数中的id，根据id查询文章数据和根据id查询评论信息
    3.将查询到的文章信息和评论信息传递到文章详情页模板中
    4.在模板中处理显示数据，时间格式使用dateFormat处理
  十三.用户评论功能
    1.在文章详情页面根据location里的userInfo信息判断用户是否登录，登录后才可以进行评论
    2.在评论表单中有两个隐藏的输入表单，值分别为该文章id和登录用户id,填写后提交表单，提交方式post
    3.获取post请求传递过来的信息，将数据添加到文章评论集合中
    4.添加成功后重定向到文章详情页面。
  十四.用户退出功能
    1.点击页面中的退出登录即可进行退出登录功能
    2.将location里的用户信息userInfo清空
    3.删除session和cookie
    4.重定向到登录页面
    




6.cookie和session
  cookie 浏览器在电脑硬盘中开辟的一块空间,主用用于服务器存储数据
    cookie中的数据是以域名的形式区分的
    cookie中的数据是有时间限制的，超过时间后会被浏览器清除
    cookie中数据会随着请求自动发送给服务器端

7.开发环境和生产环境
    环境，就是指项目运行的地方，当项目处于开发阶段，项目运行在开发人员的电脑上，项目所处的环境是开发环境。
    当项目开发完成后，要将项目放到真实的网站服务器电脑中运行，项目所处的环境是生产环境。
  为什么要区分开发环境和生产环境
    因为在不同的环境中，项目的配置是不一样的，需要在项目代码中判断当前项目的运行环境，根据不同的运行环境应用不同的项目配置。
  如何区分是生产环境还是开发环境
    通过电脑操作系统中的系统环境变量区分当前是开发环境是生产环境。
      例：   开发环境设置系统变量 NODE_ENV : development
            开发环境设置系统变量 NODE_ENV : production
